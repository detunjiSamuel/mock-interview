services:
  # MongoDB database
  mongodb:
    image: mongo:latest
    container_name: interview-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-example}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - interview-network

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: interview-rabbitmq
    restart: always
    ports:
      - "5672:5672"   # RabbitMQ default port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - interview-network

  # Main API service
  main-api:
    build: 
      context: ./main-api
      dockerfile: Dockerfile
    container_name: interview-main-api
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      - MONGO_URI=mongodb://${MONGO_USER:-root}:${MONGO_PASSWORD:-example}@mongodb:27017/interview?authSource=admin
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret}
      - PORT=8080
      - NODE_ENV=production
      - FILE_STORAGE_PATH=/app/storage
    volumes:
      - main_api_storage:/app/storage
    networks:
      - interview-network

  # Transcript service
  transcript-service:
    build:
      context: ./independent-services/transcipt-gen-service
      dockerfile: Dockerfile
    container_name: interview-transcript-service
    restart: always
    depends_on:
      - rabbitmq
      - main-api
    environment:
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
      - MAIN_API_URL=http://main-api:8080
      - MAIN_API_APP_ID=${MAIN_API_APP_ID:-transcript_service}
    networks:
      - interview-network

  # # Feedback service
  # feedback-service:
  #   build:
  #     context: ./independent-services/feedback-gen-service
  #     dockerfile: Dockerfile
  #   container_name: interview-feedback-service
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #   environment:
  #     - RABBITMQ_URI=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672
  #     - OPEN_AI_API_KEY=${OPEN_AI_API_KEY:-your_api_key}
  #     - TRANSCRIPT_APP_ID=${TRANSCRIPT_APP_ID:-transcript_service}
  #   networks:
  #     - interview-network

  # # Frontend client
  frontend:
    build:
      context: ./interview-mock-client
      dockerfile: Dockerfile
    container_name: interview-frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - main-api
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    networks:
      - interview-network

volumes:
  mongodb_data:
  rabbitmq_data:
  main_api_storage:

networks:
  interview-network:
    driver: bridge